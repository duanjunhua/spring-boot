server.port=80
# 随机字符串
user.random.value=${random.value}

#JSON格式化
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.serialization.indent-output=true

## FreeMarker配置
# 文件配置路径
spring.freemarker.template-loader-path=classpath:/webapp/
# 不缓存
spring.freemarker.cache=false
# 编码格式
spring.freemarker.charset=UTF-8
# 检查模板位置是否存在
spring.freemarker.check-template-location=true
# 模板内容类型
spring.freemarker.content-type=text/html
# Set whether all request attributes should be added to the model prior to merging with the template
spring.freemarker.expose-request-attributes=true
#Set whether all HttpSession attributes should be added to the model prior to merging with the template
spring.freemarker.expose-session-attributes=true
#Name of the RequestContext attribute for all views
spring.freemarker.request-context-attribute=request
# 文件后缀
spring.freemarker.suffix=.ftl


## 多数据源
# 数据源一
spring.datasource.primary.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.primary.jdbc-url=jdbc:mysql://localhost:3306/jdyh?useUnicode=true&characterEncoding=utf-8
spring.datasource.primary.username=root
spring.datasource.primary.password=root
# 数据源二
spring.datasource.secondary.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.secondary.jdbc-url=jdbc:mysql://localhost:3306/yhzs_new?useUnicode=true&characterEncoding=utf-8
spring.datasource.secondary.username=root
spring.datasource.secondary.password=root


## Redis配置
# Redis数据库索引（默认为0）
spring.redis.database=2
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=123456
# 连接池最大连接数（使用负值表示没有限制，不建议使用负值，可能会造成服务器崩溃）
spring.redis.jedis.pool.max-active=8
# 连接池最大阻塞等待时间（毫秒， 使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=30
# 连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=0
# 连接超时时间（毫秒，建议200 ~ 1000）
spring.redis.timeout=500


## MongoDB配置
#spring.data.mongodb.uri=mongodb://test:test@localhost:27017/userDemo?authSource=admin&authMechanism=SCRAM-SHA-1
# 数据库端口
spring.data.mongodb.port=27017
# 数据库服务器地址
spring.data.mongodb.host=localhost
# 数据库连接用户名
spring.data.mongodb.username=test
# 数据库连接密码
spring.data.mongodb.password=test
# 使用的数据库名
spring.data.mongodb.database=test
# 账号密码信息存储库
spring.data.mongodb.authentication-database=test



## Mybatis配置
# 配置实体路径
mybatis.type-aliases-package=com.boot.springboot.domain.mybatis
# 配置xml文件路径
mybatis.mapper-locations=classpath:mybatis/*.xml
# 检查mybatis配置是否存在，一般命名为mybatis-config.xml
mybatis.check-config-location=false
# type handlers处理器包路径
#mybatis.type-handlers-package=


## 日志管理
# --------------------------- Logging ------------------------------------------
# 多彩输出：NEVER-禁用、DETECT-自动检测是否支持、ALWAYS-直接使用（不建议使用）
#spring.output.ansi.enabled=DETECT
# 设置日志文件，⽇志⽂件会在10Mb⼤⼩的时候被截断
#logging.file.name=logs/springboot.log
# 日志级别，设置root日志以WARN级别输出
#logging.level.root=INFO
# 表示com.boot.springboot包下的所有日志以DEBUG输出
#logging.level.com.boot.springboot=WARN
# 定义输出到控制台的样式（不支持JDK Logger），默认格式：%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID} --- [%15.15t] %40.440logger : %msg%n
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %level %5p ${PID} --- [%file:%line] : %msg%n
# 定义输出到文件的样式（不支持JDK Logger）
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} %level %5p ${PID} --- [%file:%line] : %msg%n


# --------------------------------------------- Log4j -----------------------------------------
# 设置com.boot.springboot下的日志
#log4j.category.com.boot.springboot=DEBUG, bootfile, errorfile
# com.boot.springboot下的日志输出
# 每日新建文件
#log4j.appender.bootfile=org.apache.log4j.DailyRollingFileAppender
# 当前日志文件名称
#log4j.appender.bootfile.file=log4j.log
# 历史日志文件名称
#log4j.appender.bootfile.DatePattern='.'yyyy-MM-dd
# 日志
#log4j.appender.bootfile.layout=org.apache.log4j.PatternLayout
# 日志格式
#log4j.appender.bootfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %5p %c{1}:%L --- %m%n

# 配置日志文件根据日志级别，如对ERROR级别输出到特定日志文件中
#log4j.appender.errorfile.file=log4j_error.log
#log4j.appender.errorfile.Threshold=ERROR
# 日志格式
#log4j.appender.errorfile.layout=org.apache.log4j.PatternLayout
#log4j.appender.errorfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %5p %c{1}:%L --- %m%n

# 各类日志文件配置
# Logback: logback-spring.xml
# Log4j: log4j-spring.properties
# Log4j2: log4j2-spring.xml
# JDK: logging.properties

## AOP面向切面相关配置
# 启用AOP，即@EnableAspectJAutoProxy
spring.aop.auto=true
# 基于子类（CGLIB）的代理是否为created（true）与标准的基于Java接口的代理（false）相反
#当我们需要使⽤CGLIB来实现AOP的时候，需要配置 spring.aop.proxy-target-class=true，默认为false
spring.aop.proxy-target-class=false


## Actuator监控相关配置
# 原生端点分为三大类
# 1. 应用配置类：获取应用程序中加载的应用配置、环境变量、自动化配置报告等与SpringBoot应用密切相关的配置信息
# 2. 度量指标类：获取应用程序运行过程中用于监控的度量指标，如：内存信息、线程池信息、HTTP请求统计等
# 3. 操作控制类：提供了对应用的关闭等操作类功能
# actuator默认只开启了info和health两个端点，可以用*全部开启
management.endpoints.web.exposure.include=*
# 开启健康监控数据
management.endpoint.health.show-details=always
# 启用httptrace端点
management.endpoint.httptrace.enabled=true
# 配置不需要加/actuator前缀
management.endpoints.web.base-path=/
management.endpoint.configprops.enabled=true
# 配置/info端点数据
management.endpoint.info.enabled=true
info.app.name=spring-boot App
info.app.version=V1.0


## ES配置
# 开启 Elasticsearch 仓库
spring.data.elasticsearch.repositories.enabled=true

## micrometer-registry-prometheus配置
management.metrics.tags.application=${spring.application.name}
info.author=springboot
info.mobile=6S
